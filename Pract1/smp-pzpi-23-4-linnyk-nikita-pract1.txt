Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії








ЗВІТ
з практичної роботи №1
з дисципліни: «Скриптові мови програмування»








Виконав
ст. гр. ПЗПІ-23-4
Лінник Нікіта Анатолійович




Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2025
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	08.04.2025
	1
	Створено розділ «Завдання»
	2
	08.04.2025
	1
	Створено розділ «Опис Виконаної роботи»
	3
	08.04.2025
	1
	Створено розділ «Висновки»
	4
	08.04.2025
	1
	Створено розділ «Додаток А»
	5
	08.04.2025
	1
	Створено розділ «Додаток В»
	

2 ЗАВДАННЯ
Мета роботи — створити Bash-скрипт, який виводить на екран симетричне зображення ялинки з певною структурою, враховуючи параметри, які задаються при запуску.
Вимоги до малювання ялинки:
- ялинка має мати два рівні гілок, стовбур і шар снігу знизу;
- вона повинна бути однакова зліва і справа — симетрична;
- гілки мають виглядати як трикутники з однаковими боками;
- у кожному ярусі гілок кожен наступний ряд має бути ширший на 2 символи;
- найширший рядок гілок повинен бути на 2 символи вужчий за сніг унизу.
- висота стовбура і товщина шару снігу завжди однакові, як у прикладі.
- користувач вводить два параметри при запуску: висоту ялинки і ширину снігу;
- обидва ці числа мають бути більші за нуль;
- якщо треба, значення можуть бути трохи зменшені (максимум на 1), щоб усе співпало;
- якщо за цими параметрами неможливо зробити правильну ялинку — вивести помилку;


3 ОПИС ВИКОНАНОЇ РОБОТИ
Зчитуємо два параметри з командного рядка про висоту та ширину ялинки та перевіряємо, чи передав користувач рівно два параметри. Якщо умова не виконана - скрипт видає повідомлення про помилку і завершує виконання.
3 H=$1
4 W=$2
5
6 if [ $# -ne 2 ]; then
7     echo "Потрібно вказати висоту та ширину!" >&2
8     exit 1
9 fi


Робимо перевірку, щоб і висота, і ширина були більше нуля.
12 if [ "$H" -le 0 ] || [ "$W" -le 0 ]; then
13     echo "Висота і ширина мають бути додатні!" >&2
14     exit 2
15 fi


Задамо межі для ялинки: мінімальна висота - 8, мінімальна ширина - 7. Це обґрунтовано тим, що менші значення не дозволять побудувати хоча б дві частини трикутника з базою, стовбуром і снігом. Порушення - exit 3.
18 if [ "$H" -lt 8 ] || [ "$W" -lt 7 ]; then
19     echo "ПОМИЛКА: Замалі розміри!" >&2
20     exit 3
21 fi


Перевіряємо, що висота дерева і ширина снігу не відрізняються більше ніж на 2. Якщо різниця більша — дерево не буде мати симетричну або коректну форму (наприклад, основа буде вужчою за верхівку або навпаки).
23 DIF=$((H - W))
24
25 if [ "$DIF" -ne 0 ] && [ "$DIF" -ne 1 ] && [ "$DIF" -ne 2 ]; then
26     echo "ПОМИЛКА: Неприпустиме співвідношення!" >&2
27     exit 4
28 fi


Перевіримо на парність дерево, щоб воно не “ламалося” через незручну симетрію. Якщо обидва значення непарні, але їх різниця = 0 - виводиться помилка. Якщо обидва парні, але різниця = 2 - також виводиться помилка.
31 if [ $((H % 2)) -eq 1 ] && [ $((W % 2)) -eq 1 ]; then
32     if [ "$DIF" -eq 0 ]; then
33         echo "ПОМИЛКА: Неможливо побудувати ялинку!" >&2
34         exit 5
35     fi
36 fi
37
38 if [ $((H % 2)) -eq 0 ] && [ $((W % 2)) -eq 0 ]; then
39     if [ "$DIF" -eq 2 ]; then
40         echo "ПОМИЛКА: Неможливо побудувати ялинку!" >&2
41         exit 6
42     fi
43 fi


У додатку В(підрозділ В.1) наведена функція draw, що виводить один рядок ялинки, використовуючи відступи з пробілів зліва (щоб вирівняти по центру) та певну кількість символів (* або #) після відступу. Це дає змогу не дублювати логіку відступу та малювання по всьому скрипту.


Для побудови верхньої частини ялинки розробимо цикл, що поступово збільшує кількість символів на рядок (від 1 до ширини шару снігу - 2). На кожному рядку обчислюється кількість пробілів для центрування ((W - n)/2). Символи чергуються між * і # для декоративного вигляду. Ця частина формує “гостру” вершину ялинки.
66 TOP_PART=$(((H - 2) / 2))
67 MAX_WIDTH=$((W - 2))
68 MARK="*"
69
70 for ((n = 1; n <= MAX_WIDTH; n += 2)); do
71     left=$(((W - n) / 2))
72     draw $left $n "$MARK"
73
74     if [ "$MARK" = "*" ]; then
75         MARK="#"
76     else
77         MARK="*"
78     fi
79 done


Перед початком побудови другої частини дерева змінна MARK перемикається ще раз, щоб малюнок не мав двох однакових символів поспіль між частинами.
82 if [ "$MARK" = "*" ]; then
83     MARK="#"
84 else
85     MARK="*"
86 fi


Цикл починається з ширини 3, і аналогічно поступово розширюється.Символ MARK знову чергується на кожному рядку. Відступи і ширина розраховуються так само, як і для верхньої частини. 
89 for ((n = 3; n <= MAX_WIDTH; n += 2)); do
90     left=$(((W - n) / 2))
91
92     if [ "$MARK" = "*" ]; then
93         MARK="#"
94     else
95         MARK="*"
96     fi
97
98     draw $left $n "$MARK"
99 done


Стовбур - це два рядки з символами # шириною 3 символи, які вирівнюються по центру. Відступ обчислюється на основі ширини ялинки ((W - 3) / 2).
102 for i in 1 2; do
103     left=$(((W - 3) / 2))
104     draw $left 3 "#"
105 done


Цей фрагмент створює горизонтальну лінію з *, яка символізує основу дерева або сніг. Якщо ширина парна, її зменшують на 1, щоб зробити лінію непарною - інакше не буде центрування.
108 if [ $((W % 2)) -eq 0 ]; then
109     W=$((W - 1))
110 fi
111
112 i=0
113 while [ $i -lt $W ]; do
114     echo -n "*"
115     i=$((i + 1))
116 done
117 echo


4 ВИСНОВКИ
Під час виконання цієї практичної роботи було створено Bash-скрипт, який виводить на екран ялинку з двома ярусами гілок, стовбуром і сніговим шаром. Скрипт перевіряє правильність введених користувачем параметрів, за потреби зменшує їх (максимум на одиницю), а якщо побудувати ялинку неможливо — показує повідомлення про помилку. У програмі реалізовано обов’язкові елементи: умовні оператори, функції та кілька типів циклів.


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/y535-G1ZlAA
Хронологічний опис відеозапису:
00:00 - Вступ
00:09 - Завдання
00:20 - Огляд програми
01:36 - Розбір коду


ДОДАТОК В
Програмний код
В.1 Функція draw
GitHub репозиторій: 
 46 draw() {        
 47     local left=$1
 48     local count=$2
 49     local ch=$3
 50
 51     i=0
 52     while [ $i -lt $left ]; do
 53         echo -n " "
 54         i=$((i + 1))
 55     done
 56
 57     j=0
 58     while [ $j -lt $count ]; do
 59         echo -n "$ch"
 60         j=$((j + 1))
 61     done
 62     echo
 63 }